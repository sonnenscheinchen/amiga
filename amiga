#!/usr/bin/env python3

import argparse
import configparser
import os
import tempfile
import subprocess
import sys
import shutil
import re
import zipfile
from time import sleep
from difflib import get_close_matches

try:
    from amigaextractor import LhaExtractor
except ImportError:
    lha_support = False
else:
    lha_support = True


def nicequit(msg='', errno=0):
    """clean up and print errors to stderr"""
    if errno > 0:
        print(msg, file=sys.stderr)
    else:
        print(msg)
    quit(code=errno)


def get_basedir():
    '''return fs-uae base dir'''
    if os.path.isdir(str(os.environ.get('FS_UAE_BASE_DIR'))):
        return os.environ['FS_UAE_BASE_DIR']
    basedirconf = os.path.expanduser('~/.config/fs-uae/base-dir')
    if os.path.isfile(basedirconf):
        with open(basedirconf) as f:
            path = f.readline().strip()
        if os.path.isdir(path):
            return path
    basedirconf = os.path.expanduser('~/.config/fs-uae/fs-uae.conf')
    if os.path.isfile(basedirconf):
        with open(basedirconf) as f:
            for line in f:
                if line.split('=')[0].strip() == 'base_dir':
                    path = line.split('=')[1].strip()
                    if os.path.isdir(path):
                        return path
    try:
        docdir = subprocess.check_output(
            ['xdg-user-dir', 'DOCUMENTS']).decode().strip(os.linesep)
        path = os.path.join(docdir, 'FS-UAE')
        if os.path.isdir(path):
            return path
    except:
        path = os.path.join(os.path.expanduser('~/FS-UAE'))
        if os.path.isdir(path):
            return path
    return None


def getrealfile(name, ndir, fext):
    """return a real filename in current dir or in specific fs-uae dir"""
    if os.sep in name and os.path.isfile(name):
        return name
    elif not os.sep in name and os.path.isfile(os.path.join(ndir, name)):
        return os.path.join(ndir, name)
    elif not os.sep in name and os.path.isfile(os.path.join(ndir, name + fext)):
        return os.path.join(ndir, name + fext)


def useopt(key, value):
    config['fs-uae'][key] = value


def geteditor():
    """set a text editor"""
    #TODO: use vim/nano... as fallback
    editor = os.getenv('EDITOR')
    if not editor:
        print('Environment variable $EDITOR is not defined.')
        nicequit('Please use \"export EDITOR=youreditor\" to edit the config.', 1)
    else:
        return editor


def handlehdd(hdarg):
    """return an argument for HDx:"""
    if os.path.isdir(hdarg):
        return hdarg
    elif os.path.isfile(hdarg):
        if hdarg.lower().endswith('.lha'):
            if not lha_support:
                nicequit('LHA archives are not supported.', 1)
            global lhatmpdir
            lhatmpdir = tempfile.TemporaryDirectory(prefix='LHA')
            lhabasename = os.path.basename(hdarg)
            lhadir = os.path.join(lhatmpdir.name, lhabasename.lower().rsplit('.lha')[0])
            print('Extracting LHA archive to ' + lhadir)
            print('Don\'t put any files in here! They will be deleted.')
            os.mkdir(lhadir)
            lha = LhaExtractor(hdarg)
            ok, reason = lha.extract(dest=lhadir, verbose=True)
            if not ok:
                nicequit('Error extracting LHA archive: '.format(reason), 1)
            return lhadir
        else:
            return hdarg
    else:
        nicequit('Not a valid file or directory: ' + hdarg, 1)


def sorted_nicely(l):
    """ Sort the given iterable in the way that humans expect."""
    # http://www.codinghorror.com/blog/2007/12/sorting-for-humans-natural-sort-order.html
    convert = lambda text: int(text) if text.isdigit() else text
    alphanum_key = lambda key: [convert(c) for c in re.split('([0-9]+)', key)]
    return sorted(l, key=alphanum_key)


def assignfromfloppylist(flist):
    [useopt('floppy_drive_{0}'.format(
        floppyno), floppy) for floppyno, floppy in zip(range(4), flist)]


def getlog(log, show=True):
    with open(log) as f:
        if show:
            for line in f:
                print(line, end='')
        else:
            options = []
            for line in f:
                options.append(line.strip().split('=')[0])
            return options

# predefined stuff
fexts = ('.adf', '.dms', '.adz', '.ipf', '.zip')
hexts = ('.hdf', '.lha', '.rdb', '.vhd')
floppylist = []

# get the fs-uae-base dir, setup others
basedir = get_basedir()
if not basedir:
    nicequit('Could not find fs-uae base directory.', 1)
confdir = os.path.join(basedir, 'Configurations')
fsuae_exec = shutil.which('fs-uae')
if not fsuae_exec:
    nicequit('Could not find fs-uae executable.', 1)
install_prefix = os.path.normpath(
    os.path.join(os.path.dirname(fsuae_exec), '..'))
datfile = os.path.join(install_prefix, 'share', 'fs-uae', 'fs-uae.dat')
shaderdir = os.path.join(basedir, 'Data', 'Shaders')
savestatesdir = os.path.join(basedir, 'Save States')
logdir = os.path.join(basedir, 'Cache', 'Logs')
romdir = os.path.join(basedir, 'Kickstarts')

# set a config
global config
config = configparser.ConfigParser()
config['fs-uae'] = {}
fsuae = config['fs-uae']

# parse command line arguments
parser = argparse.ArgumentParser(description="FS-UAE command line launcher and config utility")
configstuff = parser.add_argument_group('Config related options')
configstuff.add_argument("-R", "--readconf", help="read from (a) config file(s) ", nargs='+', metavar=('config1', 'config2'))
configstuff.add_argument("-W", "--writeconf", help="write a config file", metavar='config')
configstuff.add_argument("-S", "--showconf", help="show a saved config file", metavar='config')
configstuff.add_argument("-E", "--editconf", help="edit a saved config file", metavar='config')
configstuff.add_argument("-D", "--delconf", help="delete a saved config file", metavar='config')
configstuff.add_argument("-M", "--modifyconf", help="edit config before executing fs-uae", action="store_true")
configstuff.add_argument("-L", "--listconf", help="list config files in config dir", action="store_true")
configstuff.add_argument("-X", "--noexec", help="don\'t execute fs-uae", action="store_true")
drive = parser.add_argument_group('Disk related options')
drive.add_argument("somedisk", help="use any image/directory for any drive (will overwrite other arguments)", nargs='*', metavar='DISK')
drive.add_argument("-0", "--df0", help="use floppy image for DF0", type=argparse.FileType('r'))
drive.add_argument("-1", "--df1", help="use floppy image for DF1", type=argparse.FileType('r'))
drive.add_argument("-2", "--df2", help="use floppy image for DF2", type=argparse.FileType('r'))
drive.add_argument("-3", "--df3", help="use floppy image for DF3", type=argparse.FileType('r'))
drive.add_argument("-4", "--hd0", help="use HDF/RDB/ZIP/LHA-file or directory for HD0")
drive.add_argument("-5", "--hd1", help="use HDF/RDB/ZIP/LHA-file or directory for HD1")
drive.add_argument("-6", "--hd2", help="use HDF/RDB/ZIP/LHA-file or directory for HD2")
drive.add_argument("-7", "--hd3", help="use HDF/RDB/ZIP/LHA-file or directory for HD3")
drive.add_argument("-8", "--cdr", help="use .ISO/.CUE for cd-rom emulation", type=argparse.FileType('r'))
drive.add_argument("-f", "--floppy", help="set additional floppy image(s)", nargs='+', type=argparse.FileType('r'))
drive.add_argument("-z", "--zip", help="use floppy images in archive for disk drives", nargs='+', type=argparse.FileType('r'))
drive.add_argument("-d", "--auto", help="guess corresponding floppies based on DF0", action='store_true')
state = parser.add_argument_group('Save State related options')
state.add_argument("--load", help="load save state no.", type=int, choices=range(1, 10), metavar='{1-9}')
amodel = parser.add_mutually_exclusive_group()
amodel.add_argument("-a", "--a500", help="emulate an Amiga 500 (default), set twice for A600", action="count")
amodel.add_argument("-b", "--a1200", help="emulate an Amiga 1200, set twice for CD32", action="count")
amodel.add_argument("-c", "--a4000", help="emulate an Amiga 4000, A4000/PPC or A4000/OS4", action="count")
parser.add_argument("-t", "--turbofloppy", help="2x, 8x or infinite floppy speed", action='count')
parser.add_argument("-n", "--nrfloppy", help="use multiple times to set number of floppy drives", action="count")
parser.add_argument("-l", "--lowres", help="use low resolution, can be set twice", action='count')
parser.add_argument("-w", "--writeable", help="use writeable floppy images", action="store_true")
parser.add_argument("-g", "--scale", help="use fixed 1x/2x/3x... scaling", action="count")
parser.add_argument("-i", "--cpuidle", help="set cpu_idle value", type=int, choices=range(0, 11), metavar='{0-10}')
parser.add_argument("-p", "--cpuspeed", help="set percentage of cpu speed", type=int, choices=range(1, 1000), metavar='{1-1000}')
pmem = parser.add_mutually_exclusive_group()
pmem.add_argument("-x", "--xmem", help="use X-tra memory", action="store_true")
pmem.add_argument("-m", "--mem", help="specify chip, fast and slow mem directly", nargs=3, type=int, metavar=('chip', 'fast', 'slow'))
parser.add_argument("-v", "--vsync", help="enable vsync, set twice for low lateny", action="count")
parser.add_argument("-r", "--lowaccuracy", help="lower the emulation accuracy, can be set twice", action='count')
parser.add_argument("-q", "--quietfloppy", help="quiet floppy drives", action="store_true")
parser.add_argument("-k", "--keepaspect", help="keep aspect ratio", action="store_true")
parser.add_argument("-j", "--jit", help="try to use the JIT compiler for emulation", action="store_true")
parser.add_argument("-s", "--shader", help="use a pixel shader", nargs='?', const=True)
parser.add_argument("-o", "--opts", help="set custom fs-uae options (KEY=VALUE)", nargs='+')
parser.add_argument("-u", "--uaeopts", help="set custom UNSUPPORTED uae_* options (KEY=VALUE)", nargs='+')
logarg = parser.add_argument_group('Log file options')
logarg.add_argument("--uaelog", help="Show UAE log file", action="store_true")
logarg.add_argument("--log", help="Show fs-uae log file", action="store_true")
logarg.add_argument("--stdoutlog", help="Print fs-uae log file to stdout", action="store_true")
libretro = parser.add_argument_group('FS-UAE libretro options')
libretro.add_argument("--libretro", help="Use FS-UAE libretro", action="store_true")

args = parser.parse_args()

# show uae log file
if args.uaelog:
    logfile = os.path.join(logdir, 'debug.uae')
    getlog(logfile)
    nicequit()

# show fs-uae log file
if args.log:
    logfile = os.path.join(logdir, 'fs-uae.log.txt')
    getlog(logfile)
    nicequit()

# list configs
if args.listconf:
    for conf in os.listdir(path=confdir):
        print(conf.rsplit('.fs-uae')[0], end='; ')
    nicequit()

# show config
if args.showconf:
    showconf = getrealfile(args.showconf, confdir, '.fs-uae')
    if showconf and showconf.endswith('.fs-uae'):
        try:
            sconf = open(showconf)
        except:
            nicequit('Could not open ' + showconf, 1)
        for line in sconf:
            print(line, end='')
        sconf.close()
        nicequit()
    else:
        nicequit(args.showconf + ' is possibly not a fs-uae config', 1)

# edit config
if args.editconf:
    editor = geteditor()
    editconf = getrealfile(args.editconf, confdir, '.fs-uae')
    if editconf and editconf.endswith('.fs-uae'):
        subprocess.call([editor, editconf])
        nicequit()
    else:
        nicequit('Could not edit ' + args.editconf, 1)

# delete config
if args.delconf:
    delconf = getrealfile(args.delconf, confdir, '.fs-uae')
    if delconf:
        qdel = input('Do you really want to delete ' + str(delconf) + ' [y/N]? >>  ')
        if str(qdel) == 'y':
            try:
                os.remove(delconf)
                nicequit(delconf + ' has been deleted.', 0)
            except OSError:
                nicequit('Could not delete ' + delconf, 1)
        else:
            nicequit(delconf + ' has NOT been deleted.', 0)
    else:
        nicequit('Config not found: ' + args.delconf, 1)

# read from config file(s)
if args.readconf:
    for option in args.readconf:
        readconf = getrealfile(option, confdir, '.fs-uae')
        if readconf and readconf.endswith('.fs-uae'):
            try:
                config.read_file(open(readconf))
            except:
                nicequit('Could not read configfile: ' + option, 1)
        else:
            nicequit('Config not found: ' + option, 1)


# Amiga model specific setup
if args.a500:
    if args.a500 == 1:
        useopt('amiga_model', 'A500')
    elif args.a500 == 2:
        useopt('amiga_model', 'A600')
elif args.a1200:
    if args.a1200 == 1:
        useopt('amiga_model', 'A1200')
    elif args.a1200 == 2:
        useopt('amiga_model', 'CD32')
elif args.a4000:
    if args.a4000 == 1:
        useopt('amiga_model', 'A4000/040')
        useopt('graphics_card', 'uaegfx')
        useopt('bsdsocket_library', '1')
    elif args.a4000 == 2:
        useopt('amiga_model', 'A4000/PPC')
    elif args.a4000 == 3:
        useopt('amiga_model', 'A4000/OS4')

# floppy speed setup
if args.turbofloppy == 1:
    useopt('floppy_drive_speed', '200')
elif args.turbofloppy == 2:
    useopt('floppy_drive_speed', '800')
elif args.turbofloppy == 3:
    useopt('floppy_drive_speed', '0')

# writebale floppy
if args.writeable:
    useopt('writable_floppy_images', '1')

# lowres an line-doubling
if args.lowres == 1:
    useopt('line_doubling', '0')
    useopt('low_resolution', '0')
elif args.lowres == 2:
    useopt('line_doubling', '0')
    useopt('low_resolution', '1')

# fixed scaling
if args.scale:
    useopt('scale_x', str(args.scale))
    useopt('scale_y', str(args.scale))

# setup more memory
if args.xmem:
    amodel = fsuae.get('amiga_model', 'A500')
    if amodel == 'A500':
        useopt('chip_memory', '1024')
        useopt('fast_memory', '1024')
        useopt('slow_memory', '0')
    elif amodel == 'A600':
        useopt('fast_memory', '4096')
    elif amodel == 'A1200':
        useopt('fast_memory', '8192')
    elif amodel == 'A4000/040':
        useopt('zorro_iii_memory', '131072')
    else:
        print('WARNING: Extra memory not activated.')

# direct memory setting
if args.mem:
    chipmem, fastmem, slowmem = args.mem
    if chipmem <= 4:
        chipmem *= 1024
    if chipmem % 256 != 0:
        nicequit('Chip memory must be a multiple of 256.', 1)
    useopt('chip_memory', str(chipmem))
    if fastmem <= 1024:
        fastmem *= 1024
    if fastmem % 1024 != 0:
        nicequit('Fast memory must be a multiple of 1024.', 1)
    if fastmem > 8192:
        useopt('zorro_iii_memory', str(fastmem))
        useopt('fast_memory', '0')
    else:
        useopt('fast_memory', str(fastmem))
    if slowmem <= 1:
        slowmem *= 1024
    if slowmem % 256 != 0:
        nicequit('Slow memory must be a multiple of 256.', 1)
    useopt('slow_memory', str(slowmem))

# enable vsync
if args.vsync == 1:
    useopt('video_sync', '1')
    useopt('low_latency_vsync', '0')
elif args.vsync == 2:
    useopt('video_sync', '1')

# set accuracy
if args.lowaccuracy == 1:
    useopt('accuracy', '0')
elif args.lowaccuracy == 2:
    useopt('accuracy', '-1')

#quiet floppy
if args.quietfloppy:
    useopt('floppy_drive_volume', '0')

# aspect ratio
if args.keepaspect:
    useopt('keep-aspect', '1')

# set number of floppy drives
if args.nrfloppy:
    if args.nrfloppy > 3:
        useopt('floppy_drive_count', '4')
    else:
        useopt('floppy_drive_count', str(args.nrfloppy))

# try to enable jit
if args.jit:
    if fsuae.get('amiga_model', 'A500') == 'A1200':
        print('WARNING: setting real 68020 cpu for A1200')
        useopt('amiga_model', 'A1200/020')
    if fsuae.get('accuracy', '1') == '1':
        print('WARNING: disabling cycle exact emulation for JIT.')
        useopt('accuracy', '0')
    useopt('jit_compiler', '1')
    useopt('jit_memory', 'direct')

# pixel shader stuff
if args.shader:
    if os.path.isdir(shaderdir):
        shaderlist = set(os.listdir(shaderdir))
    else:
        shaderlist = set()
    dat = zipfile.ZipFile(datfile)
    for s in dat.namelist():
        if len(s) > 21 and s.startswith('share/fs-uae/shaders/'):
            shaderlist.add(s[21:])
    dat.close()
    shaderlist = sorted(list(shaderlist))
    if args.shader is True:
        for dshader in enumerate(shaderlist):
            print('{0} - {1}'.format(dshader[0], dshader[1].rsplit('.shader')[0]))
        shaderno = ''
        while not shaderno.isdigit() or 0 < int(shaderno) > len(shaderlist):
            shaderno = input('Please select a shader: >> ')
        shaderfile = shaderlist[int(shaderno)].rsplit('.shader')[0]
    elif args.shader + '.shader' in shaderlist:
        shaderfile = args.shader.rsplit('.shader')[0]
    elif os.path.isfile(args.shader):
        shaderfile = args.shader
    else:
        nicequit('shader not found: ' + args.shader, 1)
    useopt('shader', shaderfile)

# assign disk images to floppy_drive_x and ...
[useopt('floppy_drive_{0}'.format(floppydriveno), floppyarg.name) for floppydriveno, floppyarg in zip(
    range(4), (args.df0, args.df1, args.df2, args.df3)) if floppyarg is not None]
# ...also put them in a floppy list
[floppylist.append(floppyarg.name) for floppyarg in (
    args.df0, args.df1, args.df2, args.df3) if floppyarg is not None]

# hdd config
[useopt('hard_drive_{0}'.format(harddriveno), handlehdd(hddarg)) for harddriveno, hddarg in zip(
    range(4), (args.hd0, args.hd1, args.hd2, args.hd3)) if hddarg is not None]

# cd-rom config
if args.cdr:
    useopt('cdrom_drive_0', args.cdr.name)
    useopt('cdrom_image_0', args.cdr.name)
    
if args.cpuidle:
    useopt('cpu_idle', str(args.cpuidle))

# cpu speed config
if args.cpuspeed:
    multiplier = None
    if fsuae.get('accuracy', '1') == '1':
        configured_model = fsuae.get('amiga_model', 'A500')
        if configured_model.upper() in ('A500', 'A600', 'A1000', 'CDTV', 'A500/512K', 'A500+'):
            multiplier = 2
        elif configured_model.upper() in ('A1200', 'A1200/020', 'A1200/3.0', 'CD32', 'CD32/FMV'):
            multiplier = 4
    if multiplier:
        useopt('uae_cpu_multiplier', str(round(multiplier * args.cpuspeed / 100)))
    else:
        useopt('uae_cpu_throttle', str((args.cpuspeed - 100) * 10.0))

# exract floppy images from a given .zip to a temp dir and use it
if args.zip:
    tmpdir = tempfile.TemporaryDirectory(prefix='ZIP')
    zipfilelist = []
    for cmdzip in args.zip:
        try:
            z = zipfile.ZipFile(cmdzip.name)
        except zipfile.BadZipFile:
            nicequit(cmdzip.name + ' is not a valid ZIP file.', 2)
        count = 0
        for f in sorted_nicely(z.namelist()):
            fname = os.path.join(tmpdir.name, f.split("/")[-1])
            if count > 19:
                print('WARNING: Too many floppy images in zip file. You can only use up to 20.')
                break
            elif f.lower().endswith(fexts) and z.getinfo(f).file_size <= 2000000:
                data = z.read(f)
                floppylist.append(fname)
                zipfilelist.append(fname)
                with open(fname, "wb") as mfile:
                    mfile.write(data)
                count += 1
                print('using image: ' + fname)
            else:
                print('skipping: ' + fname)
    assignfromfloppylist(zipfilelist)

# put floppies from command line in the floppy list, if any...
if args.floppy:
    for floppies in args.floppy:
        floppylist.append(floppies.name)

# if no -1 ... -7 is set, sort stuff automagicly
if args.somedisk:
    somefloppylist = []
    somehddlist = []
    for disk in args.somedisk:
        if disk.lower().endswith(fexts) and os.path.isfile(disk):
            somefloppylist.append(disk)
            floppylist.append(disk)
        elif (disk.lower().endswith(hexts) and os.path.isfile(disk)) or os.path.isdir(disk):
                somehddlist.append(handlehdd(disk))
        else:
            nicequit(disk + ' can\'t be used for any drive.', 1)
    assignfromfloppylist(somefloppylist)
    [useopt('hard_drive_{0}'.format(
        harddriveno), harddrive) for harddriveno, harddrive in zip(range(4), somehddlist)]
    if args.somedisk[0].lower().endswith(hexts) or os.path.isdir(args.somedisk[0]):
        useopt('hard_drive_0_priority', '6')

# guess the corresponding disk(s) (-d)
if args.auto:
    autofloppy = fsuae.get('floppy_drive_0')
    if not autofloppy:
        nicequit('Need a floppy for DF0 for guessing the corresponding disk.', 1)
    floppylist = []
    del fsuae['floppy_drive_0']
    autofloppy_dir, autofloppy_name = os.path.split(autofloppy)
    autofloppy_dir_list = os.listdir(os.path.realpath(autofloppy_dir))
    guessed_floppies = get_close_matches(autofloppy_name, autofloppy_dir_list, n=11, cutoff=0.8)
    autofloppylist = sorted_nicely(guessed_floppies)
    [floppylist.append(os.path.join(autofloppy_dir, i)) for i in autofloppylist if i.endswith(autofloppy[-3:])]
    assignfromfloppylist(floppylist)

# generate floppy_image_x arguments
[useopt('floppy_image_{0}'.format(
    floppyimageno), floppyimagefile) for floppyimageno, floppyimagefile in zip(range(20), floppylist)]
if len(floppylist) > 20:
        print('WARNING: Too many floppy images. You can only use up to 20.')

# generate save state dir
df0 = fsuae.get('floppy_drive_0')
if df0:
    state_dir = os.path.basename(df0)[:-4]
    useopt('state_dir_name', state_dir)
else:
    state_dir = None

# load state
if args.load:
    if not state_dir:
        nicequit('Can\'t load state without valid save state directory.', 1)
    stateno = str(args.load)
    statefile = os.path.join(savestatesdir, state_dir, 'Saved State ' + stateno + '.uss')
    if not os.path.isfile(statefile):
        nicequit('Save state not found: ' + statefile, 1)
    useopt('load_state', stateno)

# set custom fs-uae options
if args.opts:
    for option in args.opts:
        if option.count('=') == 1:
            useopt(option.split('=')[0], option.split('=')[1])
        else:
            nicequit('Bad option: ' + option, 1)

# set custom uae_ options
if args.uaeopts:
    for option in args.uaeopts:
        if option.count('=') == 1:
            useopt('uae_' + option.split('=')[0], option.split('=')[1])
        else:
            nicequit('Bad option: ' + option, 1)

# configure filesystem handlers
for hdd_no in range(10):
    if fsuae.get('hard_drive_{0}_type'.format(hdd_no)) == 'rdb':
        continue
    if fsuae.get('hard_drive_{0}_file_system'.format(hdd_no)) is not None:
        continue
    hdf = fsuae.get('hard_drive_{0}'.format(hdd_no))
    if hdf is None or not os.path.isfile(hdf):
        continue
    with open(hdf, 'rb') as f:
        fs = f.read(8)
        if fs == b'conectix':
            f.seek(0x21c, 0)
            max_bat_entries = int.from_bytes(f.read(4), byteorder='big')
            end_of_bat = 0x600 + max_bat_entries * 4
            rounded_to_cylinder = -(-end_of_bat // 512) * 512 + 512
            f.seek(rounded_to_cylinder, 0)
            fs = f.read(3)
        else:
            fs = fs[:3]
    if fs == b'PFS' or fs == b'PDS':
        # http://aminet.net/disk/misc/pfs3aio.lha#pfs3_aio-handler
        useopt('hard_drive_{0}_file_system'.format(hdd_no), 'pfs3_aio-handler')
    elif fs == b'SFS':
        # http://aminet.net/disk/misc/SFS.lha#Smartfilesystem/AmigaOS3.x/L/SmartFilesystem
        useopt('hard_drive_{0}_file_system'.format(hdd_no), 'SmartFilesystem')

# write temp- or real-config if -W
if args.writeconf:
    wconf = os.path.join(confdir, args.writeconf + '.fs-uae')
    with open(wconf, 'wt') as fsuaeconf:
        config.write(fsuaeconf)
else:
    fsuaeconf = tempfile.NamedTemporaryFile(mode='w', suffix='.fs-uae', prefix='CONF')
    config.write(fsuaeconf)
    fsuaeconf.flush()

# give user the chance to do last minute changes
if args.modifyconf:
    editor = geteditor()
    subprocess.call([editor, fsuaeconf.name])

# print config
print('\nConfiguration:')
[ print('{0} = {1}'.format(key, fsuae[key])) for key in sorted(fsuae.keys()) ]

# Finally: fs-uae exec if not -X
if not args.noexec:
    print('\n\nStarting FS-UAE...')
    if args.libretro:
        fsuae_exec = ['retroarch', '-L' , os.path.join(basedir, 'fsuae_libretro.so'), fsuaeconf.name]
    else:
        fsuae_exec = [os.getenv('FSUAE', 'fs-uae'), fsuaeconf.name]
    if args.stdoutlog:
        fsuae_exec += ['--stdout', '--log_flush=1']
    returncode = subprocess.call(fsuae_exec)
else:
    returncode = 0

# exit
if returncode == 0:
    nicequit()
else:
    nicequit('\nFs-uae died with exit status: {0}'.format(returncode), returncode)
